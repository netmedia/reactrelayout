{"version":3,"sources":["app/appconfig.js","app/services/appUrls.js","app/state/authStateSlice.js","app/infrastructure/routing/AuthorizedRoute.js","app/infrastructure/routing/prepareRoutes.js","features/login/LoginPage.js","features/login/routes.js","app/routes/publicRoutes.js","app/layouts/LoginLayout.js","features/dashboard/DashboardPage.js","features/dashboard/routes.js","app/routes/authorizedRoutes.js","app/layouts/BackofficeLayout.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["appconfig","title","subtitle","companyName","companyWeb","version","uniqueName","defaultUrl","authorizedPagesPrefix","publicPagesPrefix","loginUrl","homeUrl","layouts","login","backoffice","getLoginUrl","urlJoin","getHomeUrl","initailStateValues","token","refreshToken","tokenExpiry","user","isLogging","isAuthenticated","isError","shouldRemember","authStateSlice","createSlice","name","initialState","reducers","state","action","username","payload","password","logout","resetAuthState","actions","isAuthenticatedSelector","auth","AuthorizedRoute","Component","component","rest","useSelector","location","useLocation","from","pathname","to","prepareRoutesFrom","routes","ofLayout","shouldForceAuthorizedAccess","map","prop","key","collapse","pages","layout","path","exact","LoginPage","dispatch","useDispatch","onClick","setTimeout","loginRoutes","LoginLayout","props","publicRoutes","DashboardPage","dashboardRoutes","BackofficeLayout","useState","isNavShown","setMenuState","isLoading","notSignIn","navbarClassName","classNames","className","currentYear","Date","getFullYear","id","data-toggle","data-target","aria-controls","activeClassName","href","authorizedRoutes","App","configureStore","reducer","authReducer","Boolean","window","hostname","match","ReactDOM","render","StrictMode","store","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a22e8b4a.chunk.js","sourcesContent":["const appconfig = {\r\n    title: \"NETMEDIA\",\r\n    subtitle: \"Sample Dashboard\",\r\n    companyName: \"Netmedia\",\r\n    companyWeb: \"http://www.netmedia.io\",\r\n    version: \"v1.0\",\r\n    uniqueName: \"NetmediaSampleDashboard\",\r\n    defaultUrl: \"/\",\r\n    authorizedPagesPrefix: \"\",\r\n    publicPagesPrefix: \"auth\",\r\n    loginUrl: \"/login\",\r\n    homeUrl: \"/\",\r\n    layouts: {\r\n        login: \"LoginLayout\",\r\n        backoffice: \"BackofficeLayout\"\r\n    }\r\n};\r\n\r\nexport default appconfig;","import appconfig from \"../appconfig\";\r\nimport urlJoin from 'proper-url-join';\r\n\r\nexport const getLoginUrl = () => {\r\n    return urlJoin(appconfig.defaultUrl, appconfig.publicPagesPrefix, appconfig.loginUrl);\r\n};\r\nexport const getHomeUrl = () => {\r\n    return urlJoin(appconfig.defaultUrl, appconfig.authorizedPagesPrefix, appconfig.homeUrl);\r\n};\r\nexport const getAuthorizedPageUrl = relativeUrl => {\r\n    return urlJoin(appconfig.defaultUrl, appconfig.authorizedPagesPrefix, relativeUrl);\r\n};\r\nexport const getPublicPagePrefixUrl = () => {\r\n    return urlJoin(appconfig.defaultUrl, appconfig.publicPagesPrefix);\r\n};\r\nexport const getAuthorizedPagePrefixUrl = () => {\r\n    return urlJoin(appconfig.defaultUrl, appconfig.authorizedPagesPrefix);\r\n};\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nlet initailStateValues = {\r\n  token: null,\r\n  refreshToken: null,\r\n  tokenExpiry: null,\r\n  user: {},\r\n  isLogging: false,\r\n  isAuthenticated: false,\r\n  isError: false,\r\n  shouldRemember: false\r\n}; \r\n\r\nexport const authStateSlice = createSlice({\r\n  name: 'auth',\r\n  initialState: initailStateValues,\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.isAuthenticated = true;\r\n      state.user = {\r\n        username: action.payload.username,\r\n        password: action.payload.password,\r\n      };\r\n      state.shouldRemember = action.payload.shouldRemember;\r\n    },\r\n    logout: state => {\r\n      state = { ...initailStateValues };\r\n    },\r\n    resetAuthState: state => {\r\n      state = { ...initailStateValues };\r\n    },\r\n  },\r\n});\r\n\r\nexport const { login, logout, resetAuthState } = authStateSlice.actions;\r\n\r\nexport const loginAsync = (username, password, shouldRemember) => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(login({ username: username, \r\n                     password: password,\r\n                     shouldRemember: shouldRemember }));\r\n  }, 1000);\r\n};\r\n\r\nexport const logoutAsync = () => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(logout());\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const isAuthenticatedSelector = state => state.auth.isAuthenticated;\r\n\r\nexport default authStateSlice.reducer;\r\n","import React from \"react\";\r\nimport { Route, Redirect, useLocation } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { isAuthenticatedSelector } from \"../../state/authStateSlice\";\r\nimport { getLoginUrl } from \"../../services/appUrls\";\r\n\r\nconst AuthorizedRoute = ({ component: Component, ...rest }) => {\r\n  const isAuthenticated = useSelector(isAuthenticatedSelector);\r\n  let location = useLocation();\r\n  return (\r\n    <Route {...rest}>\r\n      {isAuthenticated ? (\r\n        <Component {...rest} />\r\n      ) : (\r\n        <Redirect from={location.pathname} to={getLoginUrl()} />\r\n      )}\r\n    </Route>\r\n  );\r\n};\r\n\r\nexport default AuthorizedRoute;\r\n","import React from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport AuthorizedRoute from \"./AuthorizedRoute\";\r\n\r\nconst prepareRoutesFrom = (routes, ofLayout, shouldForceAuthorizedAccess) => {\r\n  return routes.map((prop, key) => {\r\n    if (prop.collapse) {\r\n      return prepareRoutesFrom(prop.pages, ofLayout, shouldForceAuthorizedAccess);\r\n    }\r\n    if (prop.layout === ofLayout) {\r\n      return (\r\n        shouldForceAuthorizedAccess \r\n          ?\r\n            <AuthorizedRoute\r\n              path={prop.path}\r\n              component={prop.component}\r\n              exact={prop.exact}\r\n              key={key}\r\n            />\r\n          :\r\n            <Route\r\n              path={prop.path}\r\n              component={prop.component}\r\n              exact={prop.exact}\r\n              key={key}\r\n            />\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  });\r\n};\r\n\r\nexport default prepareRoutesFrom; ","import React from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { isAuthenticatedSelector, loginAsync } from \"../../app/state/authStateSlice\";\r\nimport { Fragment } from \"react\";\r\nimport { getLoginUrl, getHomeUrl } from \"../../app/services/appUrls\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst LoginPage = () => {\r\n  \r\n    const isAuthenticated = useSelector(isAuthenticatedSelector);\r\n    const dispatch = useDispatch();\r\n  \r\n    if (isAuthenticated) {\r\n        return <Redirect from={getLoginUrl()} to={getHomeUrl()} />;\r\n    }\r\n    \r\n    return (\r\n        <Fragment>\r\n            <div>LOGIN PAGE</div>\r\n            <button onClick={() => dispatch(loginAsync(\"vladan\", \"password\", true))}>Login</button>\r\n        </Fragment>\r\n    );\r\n};\r\n  \r\nexport default LoginPage;\r\n  ","import {getLoginUrl} from \"../../app/services/appUrls\";\r\nimport appconfig from \"../../app/appconfig\";\r\nimport LoginPage from \"./LoginPage\";\r\n\r\nexport default [\r\n    {\r\n      path: getLoginUrl(),\r\n      name: \"Login\",\r\n      component: LoginPage,\r\n      layout: appconfig.layouts.login\r\n    }\r\n];","import loginRoutes from \"../../features/login/routes\";\r\n\r\nexport default [\r\n  ...loginRoutes\r\n];","import React, { Fragment } from \"react\";\r\nimport { Switch } from \"react-router-dom\";\r\nimport appconfig from \"../appconfig\";\r\nimport prepareRoutesFrom from \"../infrastructure/routing/prepareRoutes\";\r\nimport publicRoutes from \"../routes/publicRoutes\";\r\n\r\nconst LoginLayout = props => {\r\n\r\n  return (\r\n      <Fragment>\r\n          <div>LOGIN LAYOUT</div>\r\n          <div>\r\n            <Switch>\r\n              {prepareRoutesFrom(publicRoutes, appconfig.layouts.login, false)}\r\n            </Switch>\r\n          </div>\r\n      </Fragment>\r\n    );\r\n\r\n};\r\n\r\nexport default LoginLayout;","import React from 'react';\r\n\r\nconst DashboardPage = () => {\r\n    return (\r\n        <p>DASHBOARD!!!!!!!!</p>\r\n      );\r\n};\r\n  \r\nexport default DashboardPage;\r\n  ","import {getHomeUrl} from \"../../app/services/appUrls\";\r\nimport appconfig from \"../../app/appconfig\";\r\nimport DashboardPage from \"./DashboardPage\";\r\n\r\nexport default [\r\n    {\r\n      path: getHomeUrl(),\r\n      name: \"Dashboard\",\r\n      component: DashboardPage,\r\n      layout: appconfig.layouts.backoffice\r\n    }\r\n];","import dashboardRoutes from \"../../features/dashboard/routes\";\r\n\r\nexport default [\r\n  ...dashboardRoutes\r\n];","import React, { Fragment, useState } from \"react\";\r\nimport { NavLink, Switch, useLocation } from 'react-router-dom';\r\nimport prepareRoutesFrom from \"../infrastructure/routing/prepareRoutes\";\r\nimport appconfig from \"../appconfig\";\r\nimport authorizedRoutes from \"../routes/authorizedRoutes\";\r\nimport { getLoginUrl, getHomeUrl } from \"../services/appUrls\";\r\nimport { classNames } from '@progress/kendo-react-common';\r\n\r\nexport function BackofficeLayout() {\r\n\r\n    const location = useLocation();\r\n    const loginUrl = getLoginUrl();\r\n    const homeUrl = getHomeUrl();\r\n\r\n    const [isNavShown, setMenuState] = useState(false);\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n    const notSignIn = location.pathname !== loginUrl;\r\n    \r\n    const navbarClassName = classNames('sticky-top material-color text-white py-3 py-sm-5 k-vbox shadow col-xl-2 d-xl-flex', (isNavShown ? 'show' : 'hide'));\r\n    const className = classNames('navbar sticky-top bg-white d-xl-none', { 'k-shadow': !isNavShown });\r\n      \r\n    const currentYear = (new Date()).getFullYear();\r\n\r\n    const handleMenuShowHideClick = () => {\r\n        setMenuState(!isNavShown);\r\n    }\r\n    \r\n    return (\r\n        <Fragment>\r\n        <div className={className}>\r\n          <div onClick={handleMenuShowHideClick} className={isNavShown ? 'open' : 'closed'} id=\"nav-icon\" data-toggle=\"collapse\" data-target=\"#side-nav\" aria-controls=\"side-nav\" >\r\n            {/* Using dummy span elements for animating the 'hamburger' menu */}\r\n            <span />\r\n            <span />\r\n            <span />\r\n            <span />\r\n          </div>\r\n        </div>\r\n        {isLoading \r\n            ? <span className=\"k-icon k-i-loading\"></span> \r\n            : \r\n                <div id=\"app\" className=\"app\">\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row\">\r\n                        {notSignIn && (<div id=\"nav\" className={navbarClassName}>\r\n                            <div className=\"container\">\r\n                                <h1 id=\"app-title\" className=\"mb-0\">{appconfig.title}</h1>\r\n                                <h4 id=\"app-subtitle\" className=\"mb-4\">{appconfig.subtitle}</h4>\r\n                                <hr className=\"k-hr\" />\r\n                                <h4 className=\"mt-3 mt-sm-5\">Project</h4>\r\n                                <ul className=\"nav nav-pills flex-column\">\r\n                                    <li className=\"nav-item\" id=\"dashbaord\">\r\n                                        <NavLink to={homeUrl} className=\"nav-link\" activeClassName=\"active\">Dashboard</NavLink>\r\n                                    </li>\r\n                                    <li className=\"nav-item\" id=\"issues\">\r\n                                        <NavLink to=\"/issues\" className=\"nav-link\" activeClassName=\"active\">Issues</NavLink>\r\n                                    </li>\r\n                                </ul>\r\n                                <h4 className=\"mt-3 mt-sm-5\">Account</h4>\r\n                                <ul className=\"nav nav-pills flex-column\">\r\n                                    <li className=\"nav-item\" id=\"profile\">\r\n                                        <NavLink to=\"/profile\" className=\"nav-link\" activeClassName=\"active\">My Profile</NavLink>\r\n                                    </li>\r\n                                    <li className=\"nav-item\" id=\"signout\">\r\n                                        <NavLink to={loginUrl} className=\"nav-link\" activeClassName=\"active\">Sign Out</NavLink>\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                            <div className=\"container mt-sm-auto\">\r\n                                <hr className=\"k-flex k-hr k-hr-bottom\" />\r\n                                <div id=\"copy\">\r\n                                    <p>Copyright &copy; {currentYear} <a href={appconfig.companyWeb}>{appconfig.companyName}</a>.</p>\r\n                                    <p>All Rights Reserved.</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>)}\r\n                        <div className={'content-wrapper col'}>\r\n                            <Switch>\r\n                                {prepareRoutesFrom(authorizedRoutes, appconfig.layouts.backoffice, true)}\r\n                            </Switch>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            }\r\n      </Fragment>\r\n    );\r\n}\r\n\r\nexport default BackofficeLayout","import React from 'react';\r\nimport 'typeface-roboto';\r\nimport { getPublicPagePrefixUrl, getAuthorizedPagePrefixUrl } from './app/services/appUrls';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport LoginLayout from './app/layouts/LoginLayout'\r\nimport BackofficeLayout from './app/layouts/BackofficeLayout'\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <Switch>\r\n        <Route path={getPublicPagePrefixUrl()}>\r\n          <LoginLayout />\r\n        </Route>\r\n        <Route path={getAuthorizedPagePrefixUrl()}>\r\n          <BackofficeLayout />\r\n        </Route>\r\n      </Switch>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;","import { configureStore } from '@reduxjs/toolkit';\r\nimport authReducer from './state/authStateSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    auth: authReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter basename={process.env.NODE_ENV === \"production\" ? process.env.PUBLIC_URL : \"\"}>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}